saptamana 13 partea 1
-recap:

1. user interaction
2. BE communication, page loading 

SPA = single page application (react, angular - all of this are page application)
multiple page aplication

- XMLHttpRequest - format xml-se foloseste din motive de securitate(ex:pt aplicatii bancare), jason- cel mai popular

-de fiecare data cand primim date de la utilizator- prin metoda callback
-consortiu web-cei care fac javascript


		JAVASCRIPT PROMISE
-un promise = "postas";
-un proxy pt o valoare care nu este neaparat cunoscuta in momentul initializarii acestuia

THROW- pentru eroare  <-- throw try catch -->

then - este un consumator, cel mai des intalnir
	promise.then (result)
function(result)

FINALLY
-reactioneaza mereu


exxxxx---------

// const checkWithTen = (nr) => {
//   return new Promise (function(resolve, reject){
//                       setTimeout () => {
//     if (nr>10) {
//       resolve ("true: nr>10");
//     } else {
//       reject ("false");
//     },1000);
//     );
//   };
    
//                       }

                      
                      //sau
                      
  const isGreaterThanTen = (number) => {
    const prom = new Promise ((resolve, reject) => {
     setTimeOut (() => {
      if (number > 10) {
        resolve ('nr is greater than 10 !');
      } else {
        reject ('Error');
      }
    }, 3000);
    });
      return prom;
  }
    isGreaterThanTen (22).then (response =>
                               console.log(response), rejectedResponse =>
                               console.log(rejectedResponse));
    
  isGreaterThanTen(3).catch (rejected => console.log(rejected)
                             );

________________________________________


// const checkWithTen = (nr) => {
//   return new Promise (function(resolve, reject){
//                       setTimeout () => {
//     if (nr>10) {
//       resolve ("true: nr>10");
//     } else {
//       reject ("false");
//     },1000);
//     );
//   };
    
//                       }

                      
                      //sau
                      
//   const isGreaterThanTen = (number) => {
//     const prom = new Promise ((resolve, reject) => {
//      setTimeOut (() => {
//       if (number > 10) {
//         resolve ('nr is greater than 10 !');
//       } else {
//         reject ('Error');
//       }
//     }, 3000);
//     });
//       return prom;
//   }
//     isGreaterThanTen (22).then (response =>
//                                console.log(response), rejectedResponse =>
//                                console.log(rejectedResponse));
    
//   isGreaterThanTen(3).catch (rejected => console.log(rejected)
//                              );

// const testIsPromise = (string) => {
//   const promise = new Promise ((resolve, reject) => {
//     setTimeOut (() => {
//       if (string.indexOf('promise') !==-1, {
//         resolve ('contine');
//       } else {
//           reject ('nu contine');
//     }, 1000 );     
//     }
                
//     });
//   }); nu mergeeeee

// const testIsPromise = (string) => {
//   return new Promise (function(resolve, reject){
//     if(string.indexOf('promise')!==-1,{
//       resolve ("adevarat");
//     } else {
//       reject ('false');
//     }, 1000);
//   });
// }

// const capitalizeWords = (arrayOfWords) => {
// 	const capitalizePromise = new Promise((resolve, reject) => {
//   	const capitalizedWords = arrayOfWords.map((word) => {
//     	return word[0].toUpperCase() + word.slice(1, word.length);
//     });
    
//     resolve(capitalizedWords);
//   });
  
//   return capitalizePromise;
// };
// console.log(capitalizeWords);
//are nevoie de un array cu acele cuvinte deja capitalize


// const myDummyArray = ['word', 'wordword', 'ss'];
// // capitalizedWords(myDummyArray).then(capitalizedWordsArray => 
// // console.log(capitalizedWordsArray));
// const sortCapitalizeWords = (capitalizedWords => {
//   const orderedWordsPromise = new Promise (resolve, reject) => {
//     const orderedWords = capitalizedWords.sort();
//   resolve(orderedWords);
// });
//   return orderedWordsPromise;
// };
//       const myDummyArray = ['word', 'wordword','asd'];
// capitalizedWords(myDummyArray)
// .then(sortCapitalizedWords)
// .then(response => console.log(response));
// //pt a treia fct

function get(url) {
  // Return a new promise.
  return new Promise(function(resolve, reject) {
    // Do the usual XHR stuff
    var req = new XMLHttpRequest();
    req.open('GET', url);
    req.onload = function() {
      // This is called even on 404 etc
      // so check the status
      if (req.status == 200) {
        // Resolve the promise with the response text
        resolve(req.response);
      }
      else {
        // Otherwise reject with the status text
        // which will hopefully be a meaningful error
        reject(Error(req.statusText));
      }
    };
    // Handle network errors
    req.onerror = function() {
      reject(Error("Network Error"));
    };
    // Make the request
    req.send();
  });
}
get('https://pokeapi.co/api/v2/').then(function(response) {
  console.log("Success!", JSON.parse(response));
}, function(error) {
  console.error("Failed!", error);
})


//pt curs 2_
fetch ('https://pokeapi.co/api/v2/ability').then(response => console.log());

