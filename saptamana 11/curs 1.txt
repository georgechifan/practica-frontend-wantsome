curs 11 part 1

asynchronous-pt a nu bloca pagina

request si response - 2 mesaje http

Paradigma de programare: 
-programare structurata
OOP - object oriented programming
-pure functions- rearch on google

		OOP = programare orientata obiect
-class
object
inheritance
excapsulation

Obiectul este caracterizat de : nume, atribute(date care au un nr uneori), metode


clasa: car
obiecte: mercedes, bmw etc


-obiectele sunt instante ale unei clase

OOP in java script
-

PRIN PROTOTYPE ACCESEAZA TOATE ELEMENTELE 

in html:

<html>
  <body>
    <script>
     function Student (nume, prenume, varsta, telefon){
  this.firstName=nume;
  this.lastName=prenume;
  this.age=varsta;
  this.tel=telefon
       this.getName = function () { 
         return firstName + " " + lastName
         };
       this.showNumber = function () { 
         return "numarul de telefon este: " + tel
       };
       this.ageToRetire = function () { 
         return varsta 
       };
}
      var George = new Student ("George","Chifan", 50, 0744000444);
      console.log(George);
      
      var George2 = new Student ()
    </script>
  </body>
</html>



_________________________________________________________________________________________
ovidiu-in sala ex1;


function Plant () {
this.country = "Mexico";
this.isOrganic = true;
}

// Add the showNameAndColor method to the Plant prototype property
Plant.prototype.showNameAndColor =  function () {
console.log("I am a " + this.name + " and my color is " + this.color);
}

// Add the amIOrganic method to the Plant prototype property
Plant.prototype.amIOrganic = function () {
if (this.isOrganic)
console.log("I am organic, Baby!");
}

function Fruit (fruitName, fruitColor) {
this.name = fruitName;
this.color = fruitColor;
}

// Set the Fruit's prototype to Plant's constructor, thus inheriting all of Plant.prototype methods and properties.
Fruit.prototype = new Plant ();

// Creates a new object, aBanana, with the Fruit constructor
var aBanana = new Fruit ("Banana", "Yellow");

// Here, aBanana uses the name property from the aBanana object prototype, which is Fruit.prototype:
console.log(aBanana.name); // Banana

// Uses the showNameAndColor method from the Fruit object prototype, which is Plant.prototype. The aBanana object inherits all the properties and methods from both the Plant and Fruit functions.
console.log(aBanana.showNameAndColor()); // I am a Banana and my color is yellow.
________________________________________________________________________________________________________________

ovidiu-in sala ex2---

var myFriends = {name: "Pete"};

// To find the name property below, the search will begin directly on the myFriends object and will immediately find the name property because we defined the property name on the myFriend object. This could be thought of as a prototype chain with one link.
console.log(myFriends.name);

// In this example, the search for the toString () method will also begin on the myFriends’ object, but because we never created a toString method on the myFriends object, the compiler will then search for it on the myFriends prototype (the object which it inherited its properties from).

// And since all objects created with the object literal inherits from Object.prototype, the toString method will be found on Object.prototype—see important note below for all properties inherited from Object.prototype. 

myFriends.toString();
_____________________________________________________
function myFriends() = {this.name: "Pete"};
// console.log(myFriends);
// To find the name property below, the search will begin directly on the myFriends object and will immediately find the name property because we defined the property name on the myFriend object. This could be thought of as a prototype chain with one link.
console.log(myFriends.name);
console.log(myFriends.prototype);
let myF=new myFriends();

myF.prototype = new myFriends();
myF.prototype.surName = "doe";
console.log(myF.prototype);

// In this example, the search for the toString () method will also begin on the myFriends’ object, but because we never created a toString method on the myFriends object, the compiler will then search for it on the myFriends prototype (the object which it inherited its properties from).

// And since all objects created with the object literal inherits from Object.prototype, the toString method will be found on Object.prototype—see important note below for all properties inherited from Object.prototype. 

myFriends.toString();
___________________________________---asta nu merge-de verificat

ex clasa - 3

  // The Car and the Truck class have similar behavior and properties.
  // Rewrite them in a way such that they share those properties.

  var Vehicle = function(driver) {
    this.driver = driver;
    this.speed = 0;
    this.drive = function(mph) {
      this.speed = mph;
      return this.driver + ' driving at ' + mph + ' miles per hour';
    };
  };

  var Car = function(driver) {
    this.driver = driver;
    this.speed = 0;
    this.drive = function(mph) {
      this.speed = mph;
      return this.driver + ' driving at ' + mph + ' miles per hour';
    };
  };

  var Truck = function(driver) {
    this.driver = driver;
    this.speed = 0;
    this.cargo = [];
    this.drive = function(mph) {
      this.speed = mph;
      return this.driver + ' driving at ' + mph + ' miles per hour';
    };

    this.loadCargo = function(cargo) {
      this.cargo.push(cargo);
      return this;
    };

    this.unloadCargo = function() {
      return this.cargo.pop();
    };
  };
___________________________________________


const myObj = {
nume: "Ovidiu";
prenume: ""sdsds";
}
myObj.newProp=

_____________________________________________

ex in clasa - in JS

var Person = function() {};

Person.prototype.initialize = function(name, age)
{
    this.name = name;
    this.age = age;
}

//Creati un obiect numit Trainer care sa fie derivat din obiectul Person si implementati o metoda teach() ce primeste un string numit subject si printeaza
// [nume trainer] is now teaching [subject]
let trainer = new Trainer();

trainer.initialize("Ovi", 29);
trainer.teach("Prototypes");
____________________________________________________