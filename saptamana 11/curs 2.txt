curs 2...sapt 11

tema acasa-acu 2 sapt

// triunghi.constructor;                 // Triangle(a, b, c)    

function Triangle (a,b,c){
  this.a=a;
  this.b=b;
  this.c=c;
  this.type = 'triunghi';
}
const shape = {
  type:'',
  getType: function(){ //asta-i metoda
    return this.type;
  }
}


Triangle.prototype = shape; //punem pe prototyleul de la triungle
Triangle.prototype.constructor = Triangle;//constructor
let triunghi = new Triangle (2,3,4);
Triangle.prototype.getPerimeter = function(){
  return this.a + this.b + this.c;
}
console.log(triunghi); //verificare getType
console.log(triunghi.constructor);
console.log(shape.isPrototypeOf(triunghi));
console.log(triunghi.getType());
console.log(triunghi.getPerimeter());


// forma.isPrototypeOf(triunghi);        // true

// triunghi.getPerimeter();              // 48
// triunghi.getType();                   // "triunghi"
_____________________________________________________________


tema acasa call back

const form = document.querySelector("form");
form.onsubmit = function(submitEvent) {
  // luati numele cartii din input
  submitEvent.preventDefault();//pentru a nu crapa, a nu da eroare cand dai submit
  const name = document.querySelector('input').value
  cosnt urlQuery = `https://www.googleapis.com/books/v1/volumes?q=${name}`
  
  //apelati API-ul si folositi functia resultOfBooks ca si handler pentru raspunsul primit
  const request = new XMLHttpRequest();
  request.open('GET',urlQuery);
  request.resposeType = 'json';//tipul documentului primit de la server/header / daca browserul trimite un xml atunci da eroare deoarece se asteapta sa vina un fisier json
  request.send();
  request.onload = function (){//onload este un callback
    resultsOfBooks(request.response);//in request response-ul este ceea ce returneaza
  }
};


function resultsOfBooks(response) {
  console.log(response);
  //schimbati argumentele in functia de mai jos astfel incat sa primeasca response si o functie de tip care sa fie apelata ca si callback - displayBookParagraph 
  displayDetailsWithCallback(response, displayBookParagraph);

}

function displayDetailsWithCallback(books, callback) {
 // up to 4 books 
  const booksArray = books.items.slice(0,4); //o sa ia 4 elemente, 4 carti
  console.log(booksArray);
 for (let i=0;i<booksArray.length;i++){
   callback(booksArray[i].volumeInfo.title);
 } //iterare peste carti cu for
 // detaliile le gasiti in volumeInfo - cautati prin obiectul principal folosind console.log()
 // stocati detaliile in variabile folosind const sau let
}

function displayBookParagraph(book) {
  console.log(book)
  let paragraphBook = document.createElement('p');
  paragraphBook.textContent = book; //punem titlu
  document.querySelector ('custom-input').appendChild(paragraphBook);//selectam dupa clasa custom input//append Child adauga la sfarsit
 // formati un text de genul 'cele 4 carti citite sunt: titlu1 titlu2 titlu3 titlu4'
  // inserati intr-un paragraph textul format
}

function addBooksToPage() {
  // BONUS
  // Sa se afiseze pe pagina detalii precum title, publisher, publishDate, pages, language si thumbnail-ul(imaginea) cartii
  //Bonus 2 - afisati si descrierea - description - iar daca descrierea e mai lunga de 15 cuvinte, adaugati "..."
  //exemplu : Describes the COMPASS model for working with preschool and elementary...
}


------tot timpul dai console.log---
---mergi dintr-una intr-alta----
------------------------------------------
varianta lu Ovidiu----

const form = document.querySelector("form");
form.onsubmit = function(submitEvent) {
  // luati numele cartii din input
  submitEvent.preventDefault();
  const name = document.querySelector('input').value
  const urlQuery = `https://www.googleapis.com/books/v1/volumes?q=${name}`
  
  //apelati API-ul si folositi functia resultOfBooks ca si handler pentru raspunsul primit
  const request = new XMLHttpRequest();
  request.open('GET', urlQuery);
  request.responseType = 'json';
  request.send();
  request.onload = function() {
    resultsOfBooks(request.response);
  }
  
};


function resultsOfBooks(response) {
  //schimbati argumentele in functia de mai jos astfel incat sa primeasca response si o functie de tip care sa fie apelata ca si callback - displayBookParagraph 
  displayDetailsWithCallback(response, displayBookParagraph);

}

function displayDetailsWithCallback(books, callback) {
 // up to 4 books 
  const booksArray = books.items.slice(0,4);
  console.log(booksArray);
  for (let i = 0; i < booksArray.length; i++) {
    callback(booksArray[i].volumeInfo.title);
  }
 // detaliile le gasiti in volumeInfo - cautati prin obiectul principal folosind console.log()
 // stocati detaliile in variabile folosind const sau let
}

function displayBookParagraph(book) {
  console.log(book)
  let paragraphBook = document.createElement('p');
  paragraphBook.textContent = book;
  document.querySelector('.custom-input').appendChild(paragraphBook);
 // formati un text de genul 'cele 4 carti citite sunt: titlu1 titlu2 titlu3 titlu4'
  // inserati intr-un paragraph textul format
}

function addBooksToPage() {
  // BONUS
  // Sa se afiseze pe pagina detalii precum title, publisher, publishDate, pages, language si thumbnail-ul(imaginea) cartii
  //Bonus 2 - afisati si descrierea - description - iar daca descrierea e mai lunga de 15 cuvinte, adaugati "..."
  //exemplu : Describes the COMPASS model for working with preschool and elementary...
}

______________________________________