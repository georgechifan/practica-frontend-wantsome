//1. creati o clasa Account care sa aiba location si name la constructor
//2. creati o clasa Transaction care sa aiba sender, bank, amount si reference la constructor
//2.1 - clasa Transaction sa aiba un getter finalSum() care sa scada din amount 10;
//3. creati o clasa Table care sa aiba in cunstructor un array gol transactions
//3.1 Clasa Table sa aiba o metoda addTransaction unde sa putem adauga tranzactiile pe care o sa le creem mai tarziu


class Account {
  constructor(location, name) {
    this.location = location;
    this.name = name;
  }
}
tema acasa_


class Transaction {
  constructor(sender, bank, amount, reference){
    this.sender = sender;
    this.bank = bank;
    this.amount = amount;
    this.reference = reference;
  }
  finalSum() {
    return this.amount - 10;
  }
}

class Table {
  constructor(){
    this.transactions = [];
  }
  
  addTransaction(...transaction){
    this.transactions.push(...transaction)
  }
}




const bankAccount = new Account('iasi', 'Ovidiu')
const transaction1 = new Transaction('Lucian', 'Revolut', 100, 'beer money' );
const transaction2 = new Transaction('Victor', 'ING', 1000, 'gagici' );
const table = new Table();
table.addTransaction(transaction1, transaction2);
console.log(table)

______________________________________________
in clasa exercitii:


// //1. creati o clasa Account care sa aiba location si name la constructor
// //2. creati o clasa Transaction care sa aiba sender, bank, amount si reference la constructor
// //2.1 - clasa Transaction sa aiba un getter finalSum() care sa scada din amount 10;
// //3. creati o clasa Table care sa aiba in cunstructor un array gol transactions
// //3.1 Clasa Table sa aiba o metoda addTransaction unde sa putem adauga tranzactiile pe care o sa le creem mai tarziu


// class Account {
//   constructor(location, name) {
//     this.location = location;
//     this.name = name;
//   }
// }

// class Transaction {
//   constructor(sender, bank, amount, reference){
//     this.sender = sender;
//     this.bank = bank;
//     this.amount = amount;
//     this.reference = reference;
//   }
//   finalSum() {
//     return this.amount - 10;
//   }
// }

// class Table {
//   constructor(){
//     this.transactions = [];
//   }
  
//   addTransaction(...transaction){
//     this.transactions.push(...transaction)
//   }
// }





// const bankAccount = new Account('iasi', 'Ovidiu')
// const transaction1 = new Transaction('Lucian', 'Revolut', 100, 'beer money' );
// const transaction2 = new Transaction('Victor', 'ING', 1000, 'gagici' );
// const table = new Table();
// table.addTransaction(transaction1, transaction2);
// console.log(table)

//tema in clasa curs 1 sapt 12:

// function capitalizeNames(arr){
//   const trySomething = arr.map((name) => {
//     const lowerName = name.toLowerCase();
//     return lowerName.charAt(0).toUpperCase()+lowerName.slice(1, lowerName.length);
//   })
//   return trySomething;
// }
// console.log(capitalizeNames['jacob']);


//SAUUU

// function capitalizeNames(arr){
//   const Capitalize = function (string){
//   const loweredString = string.toLowerCase();
//     return loweredString.charAt().toUpperCase() + loweredString.slice(1, loweredString.length
// ; }
//   function capitalizeName(arr){
//     let x = arr.map (Capitalize);
//     return x;
//   }
// }
// console.log(capitalizeName());



//exx 2:
// const double = item => {
//   if (typeof item === 'number') {
//     return item * 2;
//   }
//   return item;
// };
// const doubleEachNumber = (arr) => {
//   const doubledNumbersArray = arr.map(double);
//   return doubledNumbersArray
// };
// console.log(doubleEachNumber([1, "Jaja",100, "Ovidiu"]));

//ex3
// function getPersonsNames(arr){
//   const otherConst = arr.map((person) =>{
//     return person.name;
//     })
//   console.log(otherConst)
// }
// getPersonsNames(
//   [{
//   name: 'Angelina',
//   surname: 'Jolie',
//   age: 80
// },{
//      name: 'Eric',
//      surname: 'Jones',
//        age: 27
//    }] )

//ex4
// function computeExamPass(arr) {
  
// }
// console.log(computeExamPass([
//   {
//     name: 'Angelina',
//     surname: 'Jolie',
//     grade: 7
// },
// {
//   name: 'Eric',
//   surname: 'Jones',
//   grade: 3
// },
// ]))

//eeeeeee

// const arr = [
//   {
//     name: 'Ovidiu',
//     surname: 'Grig',
//   },
//   {
//     name: 'ssss',
//     surname: 'sfgggg'
//   },
// ];

// const returnFullName = item => item.name + item.surname;
// const getPersonsName = (arr) => {
//   const personsName = arr.map(returnFullName); //in mapare se declara o functie, mai sus, returnFullName
//   return getPersonsName;
// };
// console.log(getPersonsName(arr));

//ex 5:

function getPersonsDomElements(arr){
 return arr.map(item => `<h1>${item.name}</h1> <h2>${item.surname}</h2>`)
}
console.log(getPersonsDomElements([
 {
 name: 'Angelina',
 surname: 'Jolie',
 age: 80
 },
 {
 name: 'Eric',
 surname: 'Jones',
 age: 27
 },
])); 


_______________________________________________

/* Ex.1
Loop through the Array and remove all non-active users from the initial Array */

const myData = [{
    name: 'Iggy Turskis',
    active: false
},{
    name: 'Geoff Newell',
    active: true
},{
    name: 'Peter Newnham',
    active: true
},{
    name: 'James Walker',
    active: false
}];
const activeUsers = myData.filter(newData => newData.active === true);
console.log(activeUsers)

_____________________________________________

/*Ex 2
Convertiti toate distantele in mile - 0.621371 * distance - folosind map
Returnati toate itemele cu distanta mai mica de 10000  - folosind filter
Returnati distanta totala - folosind reduce
*/

const distances = [
  { from: 'New York', to: 'Dhaka', distance: 12654},
  { from: 'Sydney', to: 'chittagong', distance: 8858},
  { from: 'Kolkata', to: 'Sylhet', distance: 670}
]
const newDistances = distances.map(dist => dist.distance*(0.621371))
console.log(newDistances)

const newDistance1 = distances.filter(dist1 => dist1.distance < 10000);
console.log(newDistance1)

var newDistance = distances.reduce(function (accumulator, dist) {
  return accumulator + dist.distance;
}, 0);
console.log(newDistance);
_________________________________________________
/* Ex 3	
// Returnati un array de obiecte care sa contina doar id si titlul fiecarui item de mai jos 
const releases = [
			{
				"id": 70111470,
				"title": "Die Hard",
				"boxart": "http://cdn-0.nflximg.com/images/2891/DieHard.jpg",
				"uri": "http://api.netflix.com/catalog/titles/movies/70111470",
				"rating": [4.0],
				"bookmark": []
			},
			{
				"id": 654356453,
				"title": "Bad Boys",
				"boxart": "http://cdn-0.nflximg.com/images/2891/BadBoys.jpg",
				"uri": "http://api.netflix.com/catalog/titles/movies/70111470",
				"rating": [5.0],
				"bookmark": [{ id: 432534, time: 65876586 }]
			},
			{
				"id": 65432445,
				"title": "The Chamber",
				"boxart": "http://cdn-0.nflximg.com/images/2891/TheChamber.jpg",
				"uri": "http://api.netflix.com/catalog/titles/movies/70111470",
				"rating": [4.0],
				"bookmark": []
			},
			{
				"id": 675465,
				"title": "Fracture",
				"boxart": "http://cdn-0.nflximg.com/images/2891/Fracture.jpg",
				"uri": "http://api.netflix.com/catalog/titles/movies/70111470",
				"rating": [5.0],
				"bookmark": [{ id: 432534, time: 65876586 }]
			}
		];
const newWord = releases.map ( newReleases => newReleases.id + " " + newReleases.title)
console.log (newWord);
__________________________________________________
ex 4....
// Returnati id-urile videourilor care au rating 5.0
const newReleases = [
			{
				"id": 70111470,
				"title": "Die Hard",
				"boxart": "http://cdn-0.nflximg.com/images/2891/DieHard.jpg",
				"uri": "http://api.netflix.com/catalog/titles/movies/70111470",
				"rating": 4.0,
				"bookmark": []
			},
			{
				"id": 654356453,
				"title": "Bad Boys",
				"boxart": "http://cdn-0.nflximg.com/images/2891/BadBoys.jpg",
				"uri": "http://api.netflix.com/catalog/titles/movies/70111470",
				"rating": 5.0,
				"bookmark": [{ id: 432534, time: 65876586 }]
			},
			{
				"id": 65432445,
				"title": "The Chamber",
				"boxart": "http://cdn-0.nflximg.com/images/2891/TheChamber.jpg",
				"uri": "http://api.netflix.com/catalog/titles/movies/70111470",
				"rating": 4.0,
				"bookmark": []
			},
			{
				"id": 675465,
				"title": "Fracture",
				"boxart": "http://cdn-0.nflximg.com/images/2891/Fracture.jpg",
				"uri": "http://api.netflix.com/catalog/titles/movies/70111470",
				"rating": 5.0,
				"bookmark": [{ id: 432534, time: 65876586 }]
			}
		];
const newRating = newReleases.filter (newReleases => newReleases.rating === 5.0);
console.log(newReleases);
________________________________________________________